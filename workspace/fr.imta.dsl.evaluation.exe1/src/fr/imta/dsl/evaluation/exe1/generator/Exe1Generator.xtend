/*
 * generated by Xtext
 */
package fr.imta.dsl.evaluation.exe1.generator

import fr.imta.dsl.evaluation.exe1.exe1.Button
import fr.imta.dsl.evaluation.exe1.exe1.Frame
import fr.imta.dsl.evaluation.exe1.exe1.Label
import fr.imta.dsl.evaluation.exe1.exe1.Model
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class Exe1Generator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (m : resource.allContents.toIterable.filter(Model)) {
			fsa.generateFile(
				"FrameApplication.java",
	        	m.generateProgram)
		}
	}
	
	def generateProgram(Model m) '''
		import javax.swing.JFrame;
		import javax.swing.JLabel;
		import javax.swing.JButton;
		import javax.swing.SwingUtilities;
		import java.awt.FlowLayout;
		
		public class FrameApplication {
			public static void main(String[] args) {
				SwingUtilities.invokeLater(new Runnable() {
					public void run() {
						«FOR f : m.frames»
							«f.generate»
						«ENDFOR»
					}
				});
			}
		}
	'''
	
	def generate(Frame f) '''
		JFrame «f.name» = new JFrame();
		«f.name».setLayout(new FlowLayout());
		«f.name».setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		«f.name».setTitle("Frame «f.name»");
		«f.name».setSize(«f.width.value», «f.height.value»);
		«FOR c : f.content.components»
            «c.generateComponent(f.name, f.content.components.indexOf(c))»
        «ENDFOR»
		«f.name».setVisible(true);
	'''
	
	def dispatch generateComponent(Label l, String fName, int i) '''
		JLabel label«i» = new JLabel();
		«fName».add(label«i»);
		label«i».setText("«l.value»");
	'''
	
	def dispatch generateComponent(Button b, String fName, int i) '''
		JButton button«i» = new JButton();
		«fName».add(button«i»);
		button«i».setText("«b.value»");
	'''
}

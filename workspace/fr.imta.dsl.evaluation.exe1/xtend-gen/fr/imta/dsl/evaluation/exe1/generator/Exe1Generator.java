/**
 * generated by Xtext
 */
package fr.imta.dsl.evaluation.exe1.generator;

import com.google.common.collect.Iterables;
import fr.imta.dsl.evaluation.exe1.exe1.Button;
import fr.imta.dsl.evaluation.exe1.exe1.Component;
import fr.imta.dsl.evaluation.exe1.exe1.Content;
import fr.imta.dsl.evaluation.exe1.exe1.Frame;
import fr.imta.dsl.evaluation.exe1.exe1.Height;
import fr.imta.dsl.evaluation.exe1.exe1.Label;
import fr.imta.dsl.evaluation.exe1.exe1.Model;
import fr.imta.dsl.evaluation.exe1.exe1.Width;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class Exe1Generator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Model> _filter = Iterables.<Model>filter(_iterable, Model.class);
    for (final Model m : _filter) {
      CharSequence _generateProgram = this.generateProgram(m);
      fsa.generateFile(
        "FrameApplication.java", _generateProgram);
    }
  }
  
  public CharSequence generateProgram(final Model m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JButton;");
    _builder.newLine();
    _builder.append("import javax.swing.SwingUtilities;");
    _builder.newLine();
    _builder.append("import java.awt.FlowLayout;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class FrameApplication {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SwingUtilities.invokeLater(new Runnable() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    {
      EList<Frame> _frames = m.getFrames();
      for(final Frame f : _frames) {
        _builder.append("\t\t\t\t");
        CharSequence _generate = this.generate(f);
        _builder.append(_generate, "				");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate(final Frame f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JFrame ");
    String _name = f.getName();
    _builder.append(_name, "");
    _builder.append(" = new JFrame();");
    _builder.newLineIfNotEmpty();
    String _name_1 = f.getName();
    _builder.append(_name_1, "");
    _builder.append(".setLayout(new FlowLayout());");
    _builder.newLineIfNotEmpty();
    String _name_2 = f.getName();
    _builder.append(_name_2, "");
    _builder.append(".setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
    _builder.newLineIfNotEmpty();
    String _name_3 = f.getName();
    _builder.append(_name_3, "");
    _builder.append(".setTitle(\"Frame ");
    String _name_4 = f.getName();
    _builder.append(_name_4, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    String _name_5 = f.getName();
    _builder.append(_name_5, "");
    _builder.append(".setSize(");
    Width _width = f.getWidth();
    int _value = _width.getValue();
    _builder.append(_value, "");
    _builder.append(", ");
    Height _height = f.getHeight();
    int _value_1 = _height.getValue();
    _builder.append(_value_1, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      Content _content = f.getContent();
      EList<Component> _components = _content.getComponents();
      for(final Component c : _components) {
        String _name_6 = f.getName();
        Content _content_1 = f.getContent();
        EList<Component> _components_1 = _content_1.getComponents();
        int _indexOf = _components_1.indexOf(c);
        CharSequence _generateComponent = this.generateComponent(c, _name_6, _indexOf);
        _builder.append(_generateComponent, "");
        _builder.newLineIfNotEmpty();
      }
    }
    String _name_7 = f.getName();
    _builder.append(_name_7, "");
    _builder.append(".setVisible(true);");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateComponent(final Label l, final String fName, final int i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JLabel label");
    _builder.append(i, "");
    _builder.append(" = new JLabel();");
    _builder.newLineIfNotEmpty();
    _builder.append(fName, "");
    _builder.append(".add(label");
    _builder.append(i, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("label");
    _builder.append(i, "");
    _builder.append(".setText(\"");
    String _value = l.getValue();
    _builder.append(_value, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateComponent(final Button b, final String fName, final int i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JButton button");
    _builder.append(i, "");
    _builder.append(" = new JButton();");
    _builder.newLineIfNotEmpty();
    _builder.append(fName, "");
    _builder.append(".add(button");
    _builder.append(i, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("button");
    _builder.append(i, "");
    _builder.append(".setText(\"");
    String _value = b.getValue();
    _builder.append(_value, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateComponent(final Component b, final String fName, final int i) {
    if (b instanceof Button) {
      return _generateComponent((Button)b, fName, i);
    } else if (b instanceof Label) {
      return _generateComponent((Label)b, fName, i);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(b, fName, i).toString());
    }
  }
}
